# [PackageDev] target_format: plist, ext: tmLanguage
---
# name: Promela
# scopeName: source.promela
# fileTypes: [pml, promela]
# uuid: fa220c5d-0ad5-4a52-8027-37e13443b1fc

name: p-scheme
scopeName: source.pscm
fileTypes: [pscm]
uuid: 602979e3-6dc8-4dd7-9972-3f3f26eadeac


patterns:


# Comments
- comment: Block comment
  name: comment.block
  begin: '\!\@'
  end: '\#\$'

- comment: Block comment
  name: begin.block
  match: '\b(Ready to Go)\b'

# Declare function name as variable name
- comment: checks
  name: fun-to-var
  match: '([\/])([\/])'

# Next line indicator <~
- comment: <~
  name: next_line
  match: '([\<])([\~])'


# Primitive arithmetic
- comment: boolean operations
  name: arith.ops
  match: '[\+]|[\-]|[\*]|[\/]|[\%]|[\^]|[\!]|(v)([\/])'

# Comparison
- comment: boolean operations
  name: comparison.ops
  match: '[\<]|[\>]|[\=]' #these three cases cover the <=, =>, <> cases too

# Primitive ops
- comment: boolean operations
  name: bool.ops
  match: '\b(and|or|xor|nand|nor|not)\b'

- comment: other general primitives
  name: other primitives
  match: '\b(print|write|input|val|if|ifTrue|ifFalse|empty|while|for|in|claim|done|exit)\b'


# Constants
- comment: string
  name: string.quoted.double
  match: '"([^\\"]|\\.)*"'

- comment: integer
  name: constant.numeric
  match: '\b(([\.])([0-9])|[0-9]|([0-9])([\.])([0-9]))+\b'

- comment: bools
  name: constant.bool
  match: '\b(true|false|maybe|Nothing)\b'

# Types
- comment: type
  name: storage.types
  match: '\b(num|bool|nonetype|str|list|define)\b'

# Checks
- comment: checks
  name: checks
  match: '\b(check-expect|check-error)\b'

# Function names
- comment: func_names
  name: func_name
  match: '\w+(?= +define\b)'

# Variables
- comment: vars
  name: vars
  match: '\b(it|today)\b'

...

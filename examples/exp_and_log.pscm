
Ready to go
!@
exp
This function takes in two parameters, b and n, and returns the value of b
raised to the n power (b^n).
If the input is invalid (i.e. either the base or the exponent is less than
0), the function will fail a claim.  This means the base can be a non-integer
but the exponent cannot.
#$

[b, n] exp define
	((0 n >=) (0 b >=) and) claim
	<~			(0 n =) if
	<~ 				  1
	((1 n -) b exp) b *
done

1 0 0 exp check-expect
1 0 1 exp check-expect
0 1 0 exp check-expect
1 10 1 exp check-expect
9 2 3 exp check-expect
1024 10 2 exp check-expect
18.49 2 4.3 exp check-expect

!@ These tests will fail the claim #$
!@ 0.5 16 exp #$
!@ -1 10 exp #$
!@ 10 -1 exp #$
!@ -10 -10 exp #$


!@
log
This function takes in two parameters, b and m, and returns the smallest
value of n, such that b^(n+1) will be greater than m.
If the input is invalid (i.e. either b<2 or m<1), the function will fail
a claim.
#$

[b, m] log define
	((0 m >) (1 b >) and) claim
	<~				(m b >) if
	<~ 					   0
	   (((b m /) b) log) 1 +
done

0 1 4 log check-expect
4 31 2 log check-expect
1 3 3 log check-expect
5 364 3 log check-expect
9 512 2 log check-expect
8 432.3 2 log check-expect
5 432 3.233 log check-expect

!@ These tests will fail the claim #$
!@ 0 1 log #$
!@ 1 1 log #$
!@ 0 2 log #$




